#!/bin/bash

STDIN_TTY="$(tty)" || STDIN_TTY=""
DD() {
  TEST__WORK_DIR="$(pwd)" && DBGSHELL
}

ENTANDO_AGNOSTIC=true
# shellcheck disable=SC1090
. "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)/../lib/all.sh"

. "$SCRIPT_DIR/cli-tools/_common.sh"

ppl--collect-single-repo-version() {
  case "$1" in
    exec)
      _NONNULL ARG_FILTER
      local artifact_id
      local ver="$(git tag | grep -F "${ARG_FILTER}" | head -n 1)"
      _pom_get_project_artifact_id artifact_id "pom.xml"
      if [[ -n "$ver" ]]; then
        ALL_VERSIONS["$artifact_id"]="$ver"
        _log_i "Version \"$ver\" found for artifact \"$artifact_id\""
      else
        _log_i "No suitable version found for artifact \"$artifact_id\""
        ALL_VERSIONS["$artifact_id"]=""
      fi
      ;;
  esac
  NOCHANGE=true
}

ppl--collect-fallback-versions() {
  case "$1" in
    exec)
      local repo="$2" version
      for projectArtifactId in "${!ALL_VERSIONS[@]}"; do
        projectVersion="$ALL_VERSIONS["$projectArtifactId"]"
        _pom_get_project_property projectVersion "pom.xml" "${projectArtifactId}.version"
        if [[ -n "$projectVersion" ]]; then
          FALLBACK_VERSIONS["$projectArtifactId"]="$projectVersion"
          _log_i "Version \"$projectVersion\" found for artifact \"$projectArtifactId\""
        fi
      done
      ;;
  esac
  NOCHANGE=true
}

ppl--update-main-repo() {
  case "$1" in
    exec)
      local repo="$2"
      
      for projectArtifactId in "${!ALL_VERSIONS[@]}"; do
        projectVersion="${ALL_VERSIONS["$projectArtifactId"]}"
        
        if [ -z "$projectVersion" ]; then
          projectVersion="${FALLBACK_VERSIONS["$projectArtifactId"]}"
          if [ -n "$projectVersion" ]; then
            _log_d "No suitable version found for artifact \"$projectArtifactId\", falling back to \"$projectVersion$\" (\"$ARG_FALLBACK\")"
          fi
        fi
        
        if [ -z "$projectVersion" ]; then
          if $ARG_BESTEFF; then
            _log_d "No fallback version found for artifact \"$projectArtifactId\", keeping the existing one on pom"
          else
            _FATAL "No suitable version or fallback found for artifact \"$projectArtifactId\""
          fi
        fi
        
        _pom_set_project_property "$projectVersion" "pom.xml" "${projectArtifactId}.version"
      done
      
      AUTO_MESSAGE="$ARG_FILTER New version"
    ;;
  esac
}

ppl--generate() {
  case "$1" in
    pre)
      NO_BANNER=true
      ARGS_FLAGS+=("--best-effort")
      declare -A -g ALL_VERSIONS
      declare -A -g FALLBACK_VERSIONS
      ;;
    init)
      _get_arg -m ARG_MAIN_REPO --main-repo "$DEFAULT_MAIN_REPO"
      _get_arg -m ARG_BOM_REPO --bom-repo "$DEFAULT_BOM_REPO"
      _get_arg -m ARG_BOM_BRANCH --bom-branch "$DEFAULT_BOM_BRANCH"
      _get_arg -m ARG_MAIN_TOPIC_BRANCH --main-topic-branch
      _get_arg -m ARG_FILTER --filter
      _get_arg -m ARG_BESTEFF --best-effort
      _get_arg -m ARG_FALLBACK --fallback
      ;;
    exec)
      #~ REPOS INFO
      _print_banner "Collecting repositories information"
      _for_each_batch_item "$ARG_BATCH_FILE" "collect-single-repo-version" _repo_action
      echo -e "\n"
      
      #~ FALLBACK INFO
      if [ -n "$ARG_FALLBACK" ]; then
        _print_banner "Loading fallbacks from \"$ARG_FALLBACK\""
        _safe_common_repo_args
        ARG_TOPIC_BRANCH="$ARG_BOM_BRANCH"
        ARG_EXISTINGBRANCH=true
        _repo_action "collect-fallback-versions" "$ARG_BOM_REPO"
        
        echo -e "\n"
      fi
      
      _read_common_repo_args
      ARG_TOPIC_BRANCH="$ARG_MAIN_TOPIC_BRANCH"
      
      (
        _print_banner "update-main-repo => $ARG_MAIN_REPO"
        _repo_action "update-main-repo" "$ARG_MAIN_REPO"
      )
      
      _log_i "Completed."
      ;;
  esac
}

RUN() {
  _parse_args "$@"
  ppl--generate init
  
  case "$ARG_ACTION" in
    generate) ppl--generate exec;;
    *) _FATAL "Illegal action \"$ARG_ACTION\" provided";;
  esac
}


RUN "$@"
